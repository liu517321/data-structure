#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define N 8//带权值的叶子节点数或者是需要编码的字符数
#define M 2*N-1 //N个叶子节点构造的哈夫曼树有2N-1个结点
#define MAX 10000

typedef char TElemType;
//顺序存储结构
typedef struct {
	TElemType data;
	unsigned int weight;//权值只能是正数
		int parent; 
		int lchild;
	int rchild;
}HTNode;  // *HuffmanTree;

typedef HTNode HuffmanTree[MAX + 1]; //0号单元不使用

//存储每个字符的哈夫曼编码表，并记录对应的字符值ch及编码长度lenwwww

typedef struct
{
	char ch;
	char bits[N + 1]; // 编码
	int len;
}CodeNode;
typedef CodeNode HuffimanCode[N + 1]; //0号单元不使用
//构造哈夫曼树
void createHuffmanTree(HuffmanTree HT, HuffimanCode HC ,int* w ,int n,char str[]) {
		int i;
		void select(HuffmanTree HT, int k, int &s1, int &s2); //select函数声明
		if (n <= 1)
			return ;//对树赋初值
		for (i = 1; i <= n; i++)
		{
			// HT前n个分量存储叶子节点，它们均带有权值
			HT[i].weight = w[i];
			HT[i].lchild = 0;
			HT[i].parent = 0;
			HT[i].rchild = 0;
			for (i=n + 1; i<=MAX; i++)
			{
				//HT后m - n个分量存储中间结点，最后 - -个分量显然是整棵树的根节点
					HT[i].weight = 0;
					HT[i].lchild = 0;
					HT[i].parent = 0;
					HT[i].rchild = 0;
			}
				//开始构建哈夫曼树，即创建HT的后m-n个结点的过程，直至创建出根节点。用哈夫曼算法
for(i =n+1;i <= M;i++){
				int s1, s2; 
				select(HT, i - 1, s1, s2);/*在HT1..i-1]里选择parent为0的且权值最小的2结点，其序号分别为s1,s2, parent不为0说明该结点已经参与构造了，故不许再考虑*/
				HT[s1].parent = i;
				HT[s2].parent = i; 
				HT[i].lchild = s1;
				HT[i].rchild = s2;
				HT[i].weight = HT[s1].weight + HT[s2].weight;
		}
		for (i = 0; i <= n; i++)
			HC[i].ch = str[i]; //保存对应编码字符
		}
		//在HT[1.. k]里选择parent 为0的且权值最小的2结点，其序号分别为s1,s2, parent 不为0说明该结点已经参与构造了，故不许再考虑
		void select(HuffmanTree HT, int k, int &s1, int &s2){
			// 假设s1对应的权值总是 <= s2对应的权值
			unsigned int tmp = MAX, tmpi = 0;
		int i;
		for (i = 1; i <= k; i++)
			if (!HT[i].parent) {
				// parent必须为0
				if (tmp > HT[i].weight)
					tmp = HT[i].weight;//tmp.最后为最小的weight

				tmpi = i;

			}
				s1 = tmpi; tmp = MAX;
			tmpi = 0;
			for (i = 1; i <= k; i++)
			{
				if ((!HT[i].parent) && i != s1)
				{//parent为0
					if (tmp > HT[i].weight)
					{
						tmp = HT[i].weight;
						tmpi = i;
					}
				}
			}
			s2 = tmpi;
}

//打印哈夫曼存储结构
		void printHuffmanTree(HuffmanTree HT, char ch[]) {
			printf("n");
			printf("data, weight, parent, 1child. rchild'n");
			for (int i = 1; i <= MAX; i++) {
				if (i > N) {
					printf("% 5d, % 5d, % 5d, % 5d\n", HT[i].weight, HT[i].parent, HT[i].lchild, HT[i].rchild);
				}
				else {
					printf("%c, % 5d, % 5d, % 5d, % 5d\n", ch[i], HT[i].weight, HT[i].parent, HT[i].lchild, HT[i].rchild);
				}
			}
			printf("\n");
		}

	//创建编码表：从叶子到根逆向求解每个字符的哈夫曼编码
		
void encodingHuffmanCode(HuffmanTree HT, HuffimanCode HC)
		{char tmp[N];
			tmp[N - 1] = '\0';//编码的结束符
			int start, c, f;
			for (int i = 1; i <= N; i++)
			{// 对于第i个待编码字符即第i个带权值的叶子节点
				start = N - 1; // 编码生成以后，start 将指向编码的起始位置
				c = i;
				f = HT[i].parent;
				while (f) // f != 0, 即f不是根节点的父节点
				{if(HT[f].lchild = c) {
						tmp[--start] = '0';}
					else {
	// HT[f].rchild = c，注意由于哈夫曼树中只存在叶子节点和度为2的节点,所以除开叶子节点，节点 - -定有左右2个分
						tmp[--start] = '1';}
					c = f;
					f = HT[f].parent;
				}
				strcpy(HC[i].bits, &tmp[start]);//将tmp的后n-start个元素分给H[]指向的的字符串
				HC[i].len= N - start;
			}
		}

		//打印哈夫曼编码表
		void printHuffmanCoding(HuffimanCode HC, char ch[])
		{
			printf("\n");
			for (int i = 1; i <= N; i++) {
				printf("%c:%s\n", ch[i], HC[i].bits);
			}
			printf("\n");
		}
		//对输入的电文进行编码
void codeing(HuffimanCode HC,char *str){
	int i,j;
	while (*str) {
		// 对电文中字符逐一 - 生 成编码
		for (i = 1; j <= N; i++) {
			if (HC[i].ch == *str)
			{
				printf("%s", HC[i].bits);
				break;
			}
			str++;
		}
		printf("n");
	}

}
//解码过程:从哈夫曼树的根结点出发，按字符'0'或1确定找其左孩子或右孩子，直至找到叶子节点即可，便求得该字串相应的字符
void encodingHuffmanCbde(HuffmanTree HT, char* ch, char testDecodingStr[], int len, char* result){
	int p = MAX; // HT的最后一一个节点是根结点，前n个节点是叶子结点
	int i = 0; //指示测试串中的第i个字符//char result[30];//存储解码以后的字符串
	int j = 0;//指示结果串中的第j个字符
	while (i<len ) {
		if (testDecodingStr[i] == '0') {
			 p = HT[p].lchild;
		}
		if (testDecodingStr[i] = '1') {
			p = HT[p].rchild;
		}
		if (p <= N) {
			//p <= N则表明p为叶子结点，因为在构造哈夫曼树HT时，HT的m个结点中前n个结点为叶子结点
			result[j] = ch[p];
			j++;
			p = MAX; //p重新指向根结点
		}
		i++;
	}
		result[j] = '\0';//结果串的结束符
}
	int main(){
		HuffmanTree HT;
		TElemType ch[N + 1];//O号单元不使用，存储n个等待编码的字符
		int w[N + 1];//0号单元不使用，存储n个字符对应的权值
		printf("请输入%d个字符以及该字符对应的权值(如:.5):mn", N);
		for (int i = 1; i <= N; i++){
			scanf("%s.%d", &ch[i], &w[i]);
			getchar();//吃掉换行符
		} // 即w里第i个权值对应的是ch里第i个字符元素
		HuffimanCode HC;//HC有N+1个元素，0号不用
		createHuffmanTree(HT, HC, w, N, ch);// 构建哈夫曼树
		printHuffmanTree(HT,ch);
		encodingHuffmanCode(HT, HC);//为每个字符求解哈夫曼编码
		printHuffmanCoding(HC, ch); 
		//电文编码测试用例“abaccda”

		char* str =(char*)"abaccda";
		printf("%s的编码是: ",str);
		codeing(HC,str);
		//解码测试用例：abaccda----00011000011110111011110001
		char testDecodingStr[] = "00011000011110111011110001";
		int testDecodingStrLen = 26;
		printf("编码%s对应的字符串是：", testDecodingStr);
		char result[30];//存储解码以后的字符串
		encodingHuffmanCbde(HT, ch, testDecodingStr, testDecodingStrLen, result);//解码（译码），通过一段给定的编码翻译成对应的字符串
		printf("%s\n", result);
		return 0;		
	}
